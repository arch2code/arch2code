# Example project file that defines project level information
# note $a2c is automatically replaced with the path to the a2c directory
dbSchema: $a2c/config/schema.yaml


docConfig : $a2c/config/docConfig.yaml
cppConfig : $a2c/config/cppConfig.yaml
svConfig : $a2c/config/svConfig.yaml

# this is a list of locations, orthogonal to design hierarchy, that maps out the functional layout of the project
# root defines the top level directory for the project, and other directories are defined relative to this.
# information about project directory structure to enable simplified maintenance
# and generation of file for new blocks. Note that directory structure will mirror
# architecture hierarchy.
fileGeneration:
  template: $a2c/templates/fileGen/fileGen.py
  dirs: # this is list of locations that can be referenced as base path in fileMap section
    root: ../..
    blockIncludes: ../../common
    cppBase: ../../mdl
    svBase: ../../rtl
    vlWrap: ../../verif/vl_wrap
    tbBase: ../../mdl/tb
  fileMap:
    # generation has 2 modes, block and context
    # block creates a file per design block and cond: depend on the block definition
    # context creates a file per yaml file and cond: depend on the yaml file (typically this is for includes/packages)
    # name will be added to the module name to generate a filename plus associated extensions
    # path to the file is based on dirs section and otherwise follows block/yaml file structure
    # this means if blocks are defined in a file called cpu/cpu.yaml ie in the cpu directory then the implementation file is in cpu unless overridden in the block definition
    # if blockDirs is true then the file is placed in a directory the block appended as well
    # note that basePath should reference a path key in the dirs section
    # cond: matches fields in the block definition, if all fields are true then the file is generated
    # smartInclude is yaml based instead of block based and is used to generate include files based on the yaml file 
    # if smartInclude is true then files are only created if there is content to include. If smartInclude: false then the file is always created
    blockBase   : { name : "Base",            ext: {hdr: "h"},             cond: {hasMdl: true},                mode: block,   basePath: base,    desc: "Module Base class header file"}
    block       : { name : "",                ext: {hdr: "h", src: "cpp"}, cond: {hasMdl: true},                mode: block,   basePath: model,   desc: "Model implementation file"}
    rtlModule   : { name : "",                ext: {sv: "sv"},             cond: {hasRtl: true},                mode: block,   basePath: rtl,     desc: "RTL implementation file"}
    vlSvWrap    : { name : "_hdl_sv_wrapper", ext: {sv: "sv"},             cond: {hasVl: true, hasRtl: true},   mode: block,   basePath: vl_wrap, variant: true, desc: "SystemVerilog HDL module wrapper for verilator"}
    vlScWrap    : { name : "_hdl_sc_wrapper", ext: {hdr: "h"},             cond: {hasVl: true, hasRtl: true},   mode: block,   basePath: vl_wrap, desc: "SystemC Verilated HDL module derived class header file"}
    testbench   : { name : "Testbench",       ext: {hdr: "h", src: "cpp"}, cond: {hasTb: true}, blockDir: true, mode: block,   basePath: tb,      desc: "Testbench implementation file"}
    tbConfig    : { name : "Config",          ext: {src: "cpp"},           cond: {hasTb: true}, blockDir: true, mode: block,   basePath: tb,      desc: "Testbench config files"}
    tbExternal  : { name : "External",        ext: {hdr: "h", src: "cpp"}, cond: {hasTb: true}, blockDir: true, mode: block,   basePath: tb,      desc: "Testbench external files"}
    include     : { name : "Includes",        ext: {hdr: "h", src: "cpp"}, cond: {smartInclude: true},          mode: context, basePath: model,   desc: "yaml based include file"}
    includeFW   : { name : "IncludesFW",      ext: {hdr: "h", src: "cpp"}, cond: {smartInclude: true},          mode: context, basePath: fwInc,   desc: "yaml based fw include file"}
    package     : { name : "_package",        ext: {sv: "sv"},             cond: {smartInclude: true},          mode: context, basePath: rtl,     desc: "yaml based package file"}
  # standard copyright statement to be added to all generated files - change to suite your company
  fileCopyrightStatement: "Update your copywright statement in your project yaml file"
postProcess:
  - config/postParseFwQueue.py
  - ../../builder/base/examples/common/postParseRegister.py
  - ../../builder/base/examples/common/postParseChecks.py
