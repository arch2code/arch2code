
templates:
  # a single template for generating modules, both parent modules
  #   with no human written code and leaf modules that can have
  #   human written code before an endmodule
  #   instantiates memories blockRegs (APB leaf SoC registers)
  moduleInterfacesInstances: $a2c/templates/systemVerilog/moduleInterfacesInstances.py
  # This template generates APB address decoding when an
  #   address space is intended to be broken into sub address
  #   spaces
  apbDecodeModule: $a2c/templates/systemVerilog/apbDecodeModule.py
  # This template generates the APB leaf register unit,
  moduleRegs: $a2c/templates/systemVerilog/moduleRegs.py
  # This template as implied by it's name generates a file
  #   to be imported as a package that includes constants as
  #   as localparam(s), Types, Enums, and Structures
  constantsTypesEnumsStructures: $a2c/templates/systemVerilog/constantsTypesEnumsStructures.py
  package: $a2c/templates/systemVerilog/package.py
  module_hdl_sv_wrapper: $a2c/templates/systemVerilog/module_hdl_wrapper.py
  # Encoder objects systemverilog functions generation
  encoder: $a2c/templates/systemVerilog/encoder.py
  rtlDotF: $a2c/templates/systemVerilog/rtldotf.py