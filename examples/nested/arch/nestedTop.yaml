# this file contains the top level definitions and connections for nested
#include:
#  - exampleInclude.yaml
  
# constants / parameters are architectural level variables that can be used to control the size of structures,
# variables, number of instances, etc.
## constantname: is the constant's name and key for usage by any other dictionary doing a lookup, required
## for any other key in any other dictionary
### value: followed by a number to indicate the value for this constant, required if eval is not used
### desc: followed by a string is a description of this constant, required
### eval: optional in place of value, this is a math function that can be used to make a constant from other constant
###       supports +, -, *, and / math.
### to reference another constant use $CONSTNAME
constants:
  NUM_COMMANDS:          {value: 1024, desc: "Number of Commands"}
  NUM_COMMANDS_LOG2:     {eval: "($NUM_COMMANDS-1).bit_length()", desc: "Number of Commands log2"}
  BIG_WIDTH:             {value: 96, desc: big width test case}
  NUM_FIRST_TAGS:      {value: 64,  desc: "Num first Tags" }
  NUM_FIRST_TAGS_LOG2: {eval: "($NUM_FIRST_TAGS-1).bit_length()",  desc: "Num first Tags Log2" }
  NUM_SECOND_TAGS:       {value: 1024, desc: "Num second Tags" }
  NUM_SECOND_TAGS_LOG2:  {eval: "($NUM_SECOND_TAGS-1).bit_length()", desc: "Num second Tags Log2" }
  NUM_THIRD_TAGS:        {value: 1024, desc: "Num third Tags" }
  NUM_THIRD_TAGS_LOG2:   {eval: "($NUM_THIRD_TAGS-1).bit_length()", desc: "Num third Tags Log2" }
  NUM_TAGS:           {eval: "($NUM_FIRST_TAGS+$NUM_SECOND_TAGS+$NUM_THIRD_TAGS)", desc: "Num Tags" }
  NUM_TAGS_LOG2:      {eval: "($NUM_TAGS-1).bit_length()", desc: "Num Tags Log2" }


encoders:
  tag:
    desc: "Tag Encoder"
    encoderType: tagT
    encoderTypeWidth: NUM_TAGS_LOG2
    encoderTypeDesc: Read Tag
    enumType: tagTypeT
    enumPrefix: TAGTYPE_
    enumDesc: type of tag for encode
    baseConstPrefix: TAGBASE_
    items:
      firstTag: { numBits: NUM_FIRST_TAGS_LOG2, desc: "Tag type 1", varName: firstTag }
      secondTag:  { numBits: NUM_SECOND_TAGS_LOG2, desc: "Tag type 2", varName: secondTag }
      thirdTag:   { numBits: NUM_THIRD_TAGS_LOG2, desc: "Tag type 3", varName: thirdTag }
  loc:
    desc: "Location Encoder"
    encoderType: cmdidT
    encoderTypeWidth: NUM_COMMANDS_LOG2
    encoderTypeDesc: Command ID
    zeroBased: false
    enumPrefix: LOC_
    enumType: locT
    enumDesc: type of location for encode
    extendedRangeItem: flash 
    extendedRangeDesc: Flash location
    items:
      firstTag: { numBits: NUM_FIRST_TAGS_LOG2, desc: "Tag type 1", varName: firstTag }

types:
  enumType:
    desc: Example of an enum
    enum:
      - {enumName: ENUM_TYPE_1, desc: this type of enum, value: 1}
      - {enumName: ENUM_TYPE_2, desc: other type of enum, value: NUM_COMMANDS }
  bigT:
    width: BIG_WIDTH
    desc: big width test case
  dataT:
    width: 128
    desc: Data
  lengthT:
    width: 16
    desc: Length of transfer

# variables used as members of structures, only structures are attached to interfaces
## variablename: is the variable's name and key for usage by any other dictionary doing a lookup, required
### width: followed by a number or a constant's key (constantname), required
### desc: followed by a string is a description of this variable, required
variables:
  cmdid: 
    type: cmdidT
    desc: Command context

# structures are collections of variables, or other structures, structures are the main communication tool from block to block on any interface
## structureName: is the structure's name and key for usage by any other dictionary doing a lookup, required
### - variablename
### - strcuturename
### dash (-) followed by a variablename or a structureName, the dash is making a list of variables or structures at least one is required to create a valid structure
structures:
  test_st:
    a: {varType: cmdidT } 
  bigSt:
    b: {varType: bigT }  
  testDataSt:
    data: {varType: dataT }
  testDataHdrSt:
    cmdid: {}
  lengthHdrSt:
    length: {varType: lengthT, generator: tracker(length) } # length is a special tracker that indicates that the variable is a length field
  cmdidHdrSt:
    cmdid: {generator: tracker(cmdid) } 

# interfaces are needed to make any connection from one instance of a block to another block's instance
## interfacename: is the interface's name and key for usage by any other dictionary doing a lookup, required
### interfaceType: followed by a string that links to a valid interface type
####        i.e. rdy_vld could be defined as a ready valid interface
####             static could be defined as a single port interface with a structure and no protocol
####             req_ack could be defined as a request acknowledge interface with a structure in both directions
### structures: is a list of dictionaries, each dictionary has two keys, each item in the list is one per structure on this interface
###                 some interfaces can have more than one structure but all interfaces must have at least one
#### dash (-) followed by a dictionary
#### structureName: followed by a string is a key reference to the structures dictionary
#### structureType: followed by a string, the structureType is what the structureName gets bound to during generation
####                    a System Verilog interface may have more than one structureType defined and that is what each 
####                    structureName gets bound to during generation, similar for System C
### desc: followed by a string is a description of this interface, required
interfaces:
  test:
    interfaceType: rdy_vld
    desc: "Test interface"
    structures:
      - {structure: test_st, structureType: data_t}
  alpha:
    interfaceType: rdy_vld
    desc: "Test interface alpha"
    structures:
      - {structure: test_st, structureType: data_t}
  beta:
    interfaceType: rdy_vld
    desc: "Test interface beta"
    structures:
      - {structure: test_st, structureType: data_t}
  gamma:
    interfaceType: rdy_vld
    desc: "Test interface gamma"
    structures:
      - {structure: test_st, structureType: data_t}
  testrvSize:
    interfaceType: rdy_vld
    desc: "Data path test interface"
    maxTransferSize: 2048
    multiCycleMode: api_list_size
    structures:
      - {structure: testDataSt, structureType: data_t}
  testrvTracker:
    interfaceType: rdy_vld
    desc: "Data path test interface"
    maxTransferSize: 2048
    multiCycleMode: api_list_tracker
    trackerType: cmdid
    structures:
      - {structure: testDataSt, structureType: data_t}

# blocks these are subsystems or blocks that can be instanced one or more times
## blockname: followed by a name that gives this object (block) a unique key
### portname: followed by a name that gives this port a unique key for this block, this is used when a block is instanced
###           more than once or if a port is instanced more than once to connect to multiple blocks with the same interface, optional
#### count: number that indicates how many of these portname exist and can be connected, optional
####          numbered from 0 upto count - 1
blocks:
  top:
    desc: Fake top
    blockGroup: blockTop
  testContainer:
    desc: Top for test blocks
    blockGroup: blockTop
  testBlock:
    desc: Top test block
    blockGroup: blockTop
  subBlockContainer:
    desc: container of sub test blocks
    blockGroup: blockTop
  subBlock:
    desc: sub test block
    blockGroup: blockTop
  firstBlock:
    desc: initiator
    blockGroup: blockTop
  secondBlock:
    desc: middle Block
    blockGroup: blockTop
  lastBlock:
    desc: last block
    blockGroup: blockTop
  secondSubA:
    desc: sub block A of second
    blockGroup: blockTop
  secondSubB:
    desc: sub block B of second
    blockGroup: blockTop  
  nestedL1:
    desc: Nested mapping test case L1
    blockGroup: blockTop
  nestedL2:
    desc: Nested mapping test case L2
    blockGroup: blockTop
  nestedL3:
    desc: Nested mapping test case L3
    blockGroup: blockTop
  nestedL4:
    desc: Nested mapping test case L4
    blockGroup: blockTop
  nestedL5:
    desc: Nested mapping test case L5
    blockGroup: blockTop
  nestedL6:
    desc: Nested mapping test case L6
    blockGroup: blockTop
  producer:
    desc: producer test block
    blockGroup: blockTop
  consumer:
    desc: consumer test block
    blockGroup: blockTop
# instances, these are instantiations of objects
#   implies a top level of some kind that is instancing objects, an instance can instance other objects, optional nesting
## instancename: is the instance name being instanced, required
### instanceType: followed by a string which is the key to finding which object is being instanced (objectname), required
### color: followed by a string which is a color (provide link to valid colors) this adds a color to diagrams
###          for this instance, optional (currently does not work in diagram generation code)
instances:
  uTop:
    container: top # self referential
    instanceType: top
    instGroup: top
    addressMap: False
  uTestBlock0:
    container: testContainer 
    instanceType: testBlock
    instGroup: top
    addressMap: False
  uTestBlock1:
    container: testContainer 
    instanceType: testBlock
    instGroup: top
    addressMap: False
  uSubBlockContainer0:
    container: testContainer
    instanceType: subBlockContainer
    instGroup: top
    addressMap: False
  uSubBlockContainer1:
    container: testContainer
    instanceType: subBlockContainer
    instGroup: top
    addressMap: False
  uSubBlockContainer2:
    container: testContainer
    instanceType: subBlockContainer
    instGroup: top
    addressMap: False
  uSubBlock0:
    container: subBlockContainer
    instanceType: subBlock
    instGroup: top
    addressMap: False
  uSubBlock1:
    container: subBlockContainer
    instanceType: subBlock
    instGroup: top
    addressMap: False
  uTestTop:
    container: top
    instanceType: testContainer
    instGroup: top
    addressMap: False
  uNestedL1:
    container: top
    instanceType: nestedL1
    instGroup: top
    addressMap: False
  uNestedL2:
    container: nestedL1
    instanceType: nestedL2
    instGroup: top
    addressMap: False
  uNestedL3:
    container: nestedL2
    instanceType: nestedL3
    instGroup: top
    addressMap: False
  uNestedL4:
    container: nestedL3
    instanceType: nestedL4
    instGroup: top
    addressMap: False
  uNestedL5:
    container: nestedL4
    instanceType: nestedL5
    instGroup: top
    addressMap: False
  uNestedL6:
    container: nestedL5
    instanceType: nestedL6
    instGroup: top
    addressMap: False
  uFirst:
    container: testContainer
    instanceType: firstBlock
    instGroup: top
    addressMap: False
  uSecond:
    container: testContainer
    instanceType: secondBlock
    instGroup: top
    addressMap: False
  uLast:
    container: testContainer
    instanceType: lastBlock
    instGroup: top
    addressMap: False
  uSecondSubA:
    container: secondBlock
    instanceType: secondSubA
    instGroup: top
    addressMap: False
  uSecondSubB:
    container: secondBlock
    instanceType: secondSubB
    instGroup: top
    addressMap: False
  uProducer:
    container: testContainer
    instanceType: producer
    instGroup: top
    addressMap: False
  uConsumer:
    container: testContainer
    instanceType: consumer
    instGroup: top
    addressMap: False

# connections are specify interface connections between different instaces of objects
## - {}, dash followed by a dictionary, connections is a list of dictionaries
### interfacename: followed by string that is a key to this interface, an interface can be connected 1 or more times
### src: followed by a name of the source / master instance for this conneciton
### dst: followed by a name of the destination / slave instance for this conneciton
### count: followed by a number to indicate the number of ports to connect to, only valid with srcport or dstport and an interfacename that has multiple ports
###
### ports are optional, and are implied in most use cases. The exception is where disambiguation is needed, mainly in array use cases
### srcport: used if there is more than one objectname instance of the source / master, declares the port of source objectname to connect to
### dstport: used if there is more than one objectname instance of destination / slave, declares the port of destination objectname to connect to
### color: followed by a string which is a color (provide link to valid colors) this adds a color to diagrams
###          for this connection, optional (currently does not work in diagram generation code)
connections:
  - {interface: test,    name: top0,   src: uTop,                dst: uTestBlock0,         dstport: top}
  - {interface: test,    name: top1,   src: uTop,                dst: uTestBlock1,         dstport: top}
  - {interface: test,                  src: uTestBlock0,         srcport: loop1src,  dst: uTestBlock1,         dstport: loop1dst}
  - {interface: test,                  src: uTestBlock1,         srcport: loop1src,  dst: uTestBlock0,         dstport: loop1dst}
  - {interface: test,                  src: uTestBlock0,         srcport: loop2src,  dst: uSubBlockContainer0, dstport: in}
  - {interface: test,                  src: uSubBlockContainer0, srcport: out,       dst: uTestBlock0,         dstport: loop2dst}
  - {interface: test,                  src: uTestBlock1,         srcport: loop2src,  dst: uSubBlockContainer1, dstport: in}
  - {interface: test,                  src: uSubBlockContainer1, srcport: out,       dst: uSubBlockContainer2, dstport: in}
  - {interface: test,                  src: uSubBlockContainer2, srcport: out,       dst: uTestBlock1,         dstport: loop2dst}
  - {interface: test,                  src: uSubBlock0,          srcport: src,       dst: uSubBlock1,          dstport: dst}
  - {interface: test,                  src: uTestTop,                                dst: uNestedL1,           dstport: nested1}
  - {interface: alpha, name: primary,  src: uFirst,                                  dst: uSecond          } # no ports, but named
  - {interface: beta,                  src: uSecond,                                 dst: uLast            } # no ports or name
  - {interface: gamma, name: response, src: uLast,                                   dst: uFirst           }
  - {interface: test,                  src: uSecondSubA,                             dst: uSecondSubB           }
  - {interface: testrvTracker,         src: uProducer,                               dst: uConsumer,         name: src_trans_dest_trans_rv_tracker  }
  - {interface: testrvTracker,         src: uProducer,                               dst: uConsumer,         name: src_clock_dest_trans_rv_tracker  }
  - {interface: testrvTracker,         src: uProducer,                               dst: uConsumer,         name: src_trans_dest_clock_rv_tracker  }
  - {interface: testrvSize,            src: uProducer,                               dst: uConsumer,         name: src_trans_dest_trans_rv_size, maxTransferSize: 1024  }
  - {interface: testrvSize,            src: uProducer,                               dst: uConsumer,         name: src_clock_dest_trans_rv_size  }
  - {interface: testrvSize,            src: uProducer,                               dst: uConsumer,         name: src_trans_dest_clock_rv_size  }

connectionMaps:
  - {interface: alpha, name: primary,  block: secondBlock,                      direction: dst, instance: uSecondSubA  } # mapping without ports
  - {interface: beta,                  block: secondBlock,                      direction: src, instance: uSecondSubB  } #mapping without ports or name
  - {interface: test,                  block: subBlockContainer, port: in,      direction: dst, instance: uSubBlock0, instancePort: dst }
  - {interface: test,                  block: subBlockContainer, port: out,     direction: src, instance: uSubBlock1, instancePort: src }
  - {interface: test,                  block: nestedL1,          port: nested1, direction: dst, instance: uNestedL2, instancePort: nested2 }
  - {interface: test,                  block: nestedL2,          port: nested2, direction: dst, instance: uNestedL3, instancePort: nested3 }
  - {interface: test,                  block: nestedL3,          port: nested3, direction: dst, instance: uNestedL4, instancePort: nested4 }
  - {interface: test,                  block: nestedL4,          port: nested4, direction: dst, instance: uNestedL5, instancePort: nested5 }
  - {interface: test,                  block: nestedL5,          port: nested5, direction: dst, instance: uNestedL6, instancePort: nested6 }


# flows, are very similar to a plantuml sequence diagram, a filename is taken and optionally
#   consistency checks can be made for connections the flow
## filenames:
### - , dash followed by a string indicates the filename for each flow
####    inside each flow a connection can be indicated and checked for consistency
####    the format for consistency check and connection replacement in a flow must follow the below format
####    instance operator instance : connectionKey '''process'''
####    For example
####    uBlocka -> uBlockc0 : cs_stuff '''process'''
#####     spaces are recuired between each item in the string, the word proccess inside triple ticks
#####     is also needed without spaces to aid in processing
#flows:
#  filenames:

